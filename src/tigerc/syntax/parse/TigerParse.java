
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 22 19:05:54 EDT 2020
//----------------------------------------------------

package tigerc.syntax.parse;

import tigerc.syntax.absyn.*;
import tigerc.util.Pair;
import tigerc.util.Symbol;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 22 19:05:54 EDT 2020
  */
public class TigerParse extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TigerParse() {super();}

  /** Constructor which sets the default scanner. */
  public TigerParse(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TigerParse(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\006\000\002\003\005\000\002" +
    "\003\006\000\002\003\010\000\002\003\006\000\002\003" +
    "\010\000\002\003\006\000\002\003\012\000\002\003\007" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\005\003" +
    "\000\002\005\003\000\002\006\005\000\002\006\006\000" +
    "\002\006\006\000\002\007\002\000\002\007\003\000\002" +
    "\010\003\000\002\010\005\000\002\011\002\000\002\011" +
    "\003\000\002\012\003\000\002\012\005\000\002\013\002" +
    "\000\002\013\003\000\002\015\005\000\002\014\003\000" +
    "\002\014\005\000\002\017\002\000\002\017\003\000\002" +
    "\020\003\000\002\020\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\023\006\000\002\023\010" +
    "\000\002\024\006\000\002\021\003\000\002\021\004\000" +
    "\002\031\003\000\002\031\005\000\002\031\005\000\002" +
    "\025\011\000\002\025\013\000\002\022\003\000\002\022" +
    "\004\000\002\030\005\000\002\026\002\000\002\026\003" +
    "\000\002\027\003\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\030\004\015\005\013\006\006\013\017\023" +
    "\004\040\014\043\005\044\007\047\016\053\023\054\010" +
    "\001\002\000\030\004\015\005\013\006\006\013\017\023" +
    "\004\040\014\043\005\044\007\047\016\053\023\054\010" +
    "\001\002\000\030\004\015\005\013\006\006\013\017\023" +
    "\004\040\014\043\005\044\007\047\016\053\023\054\010" +
    "\001\002\000\070\002\uffff\010\uffff\012\uffff\014\uffff\016" +
    "\uffff\020\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff" +
    "\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035" +
    "\uffff\041\uffff\042\uffff\045\uffff\046\uffff\050\uffff\051\uffff" +
    "\055\uffff\056\uffff\057\uffff\001\002\000\004\004\210\001" +
    "\002\000\070\002\ufffa\010\ufffa\012\ufffa\014\ufffa\016\ufffa" +
    "\020\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\041\ufffa\042\ufffa\045\ufffa\046\ufffa\050\ufffa\051\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\001\002\000\034\002\000\022\035" +
    "\023\027\024\040\025\031\026\034\027\033\030\041\031" +
    "\036\032\037\033\032\034\030\035\042\001\002\000\004" +
    "\002\207\001\002\000\070\002\ufffe\010\ufffe\012\ufffe\014" +
    "\ufffe\016\ufffe\020\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\035\ufffe\041\ufffe\042\ufffe\045\ufffe\046\ufffe\050\ufffe" +
    "\051\ufffe\055\ufffe\056\ufffe\057\ufffe\001\002\000\030\004" +
    "\015\005\013\006\006\013\017\023\004\040\014\043\005" +
    "\044\007\047\016\053\023\054\010\001\002\000\102\002" +
    "\uffe2\010\uffe2\012\uffe2\013\156\014\uffe2\015\155\016\uffe2" +
    "\017\154\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\041\uffe2\042\uffe2\045\uffe2\046" +
    "\uffe2\050\uffe2\051\uffe2\055\uffe2\056\uffe2\057\uffe2\001\002" +
    "\000\012\050\uffd0\055\102\056\075\057\077\001\002\000" +
    "\032\004\015\005\013\006\006\013\017\014\uffd9\023\004" +
    "\040\014\043\005\044\007\047\016\053\023\054\010\001" +
    "\002\000\076\002\uffe1\010\uffe1\012\uffe1\014\uffe1\015\060" +
    "\016\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\041\uffe1\042\uffe1\045\uffe1\046" +
    "\uffe1\050\uffe1\051\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002" +
    "\000\070\002\ufffd\010\ufffd\012\ufffd\014\ufffd\016\ufffd\020" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\041" +
    "\ufffd\042\ufffd\045\ufffd\046\ufffd\050\ufffd\051\ufffd\055\ufffd" +
    "\056\ufffd\057\ufffd\001\002\000\074\002\ufffb\010\ufffb\012" +
    "\ufffb\014\ufffb\016\ufffb\020\ufffb\021\024\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\025\041\ufffb\042\ufffb" +
    "\045\ufffb\046\ufffb\050\ufffb\051\ufffb\055\ufffb\056\ufffb\057" +
    "\ufffb\001\002\000\070\002\ufff9\010\ufff9\012\ufff9\014\ufff9" +
    "\016\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\041\ufff9\042\ufff9\045\ufff9\046\ufff9\050\ufff9\051" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\001\002\000\004\004\057" +
    "\001\002\000\030\004\015\005\013\006\006\013\017\023" +
    "\004\040\014\043\005\044\007\047\016\053\023\054\010" +
    "\001\002\000\070\002\ufff8\010\ufff8\012\ufff8\014\ufff8\016" +
    "\ufff8\020\ufff8\022\035\023\027\024\040\025\031\026\034" +
    "\027\033\030\041\031\036\032\037\033\032\034\030\035" +
    "\042\041\ufff8\042\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\070\002\uffe3\010" +
    "\uffe3\012\uffe3\014\uffe3\016\uffe3\020\uffe3\022\035\023\027" +
    "\024\040\025\031\026\034\027\033\030\041\031\036\032" +
    "\037\033\032\034\030\035\uffe3\041\uffe3\042\uffe3\045\uffe3" +
    "\046\uffe3\050\uffe3\051\uffe3\055\uffe3\056\uffe3\057\uffe3\001" +
    "\002\000\054\002\uffe8\010\uffe8\012\uffe8\014\uffe8\016\uffe8" +
    "\020\uffe8\022\035\023\027\024\040\025\031\034\uffe8\035" +
    "\uffe8\041\uffe8\042\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\001\002\000\070\002\uffec\010" +
    "\uffec\012\uffec\014\uffec\016\uffec\020\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\041\uffec\042\uffec\045\uffec" +
    "\046\uffec\050\uffec\051\uffec\055\uffec\056\uffec\057\uffec\001" +
    "\002\000\054\002\uffe6\010\uffe6\012\uffe6\014\uffe6\016\uffe6" +
    "\020\uffe6\022\035\023\027\024\040\025\031\034\uffe6\035" +
    "\uffe6\041\uffe6\042\uffe6\045\uffe6\046\uffe6\050\uffe6\051\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\001\002\000\054\002\uffe7\010" +
    "\uffe7\012\uffe7\014\uffe7\016\uffe7\020\uffe7\022\035\023\027" +
    "\024\040\025\031\034\uffe7\035\uffe7\041\uffe7\042\uffe7\045" +
    "\uffe7\046\uffe7\050\uffe7\051\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\001\002\000\070\002\uffee\010\uffee\012\uffee\014\uffee\016" +
    "\uffee\020\uffee\022\uffee\023\uffee\024\040\025\031\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\041\uffee\042\uffee\045\uffee\046\uffee\050\uffee\051\uffee" +
    "\055\uffee\056\uffee\057\uffee\001\002\000\054\002\uffea\010" +
    "\uffea\012\uffea\014\uffea\016\uffea\020\uffea\022\035\023\027" +
    "\024\040\025\031\034\uffea\035\uffea\041\uffea\042\uffea\045" +
    "\uffea\046\uffea\050\uffea\051\uffea\055\uffea\056\uffea\057\uffea" +
    "\001\002\000\054\002\uffe9\010\uffe9\012\uffe9\014\uffe9\016" +
    "\uffe9\020\uffe9\022\035\023\027\024\040\025\031\034\uffe9" +
    "\035\uffe9\041\uffe9\042\uffe9\045\uffe9\046\uffe9\050\uffe9\051" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\001\002\000\054\002\uffe5" +
    "\010\uffe5\012\uffe5\014\uffe5\016\uffe5\020\uffe5\022\035\023" +
    "\027\024\040\025\031\034\uffe5\035\uffe5\041\uffe5\042\uffe5" +
    "\045\uffe5\046\uffe5\050\uffe5\051\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\001\002\000\070\002\uffeb\010\uffeb\012\uffeb\014\uffeb" +
    "\016\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\041\uffeb\042\uffeb\045\uffeb\046\uffeb\050\uffeb\051" +
    "\uffeb\055\uffeb\056\uffeb\057\uffeb\001\002\000\070\002\uffe4" +
    "\010\uffe4\012\uffe4\014\uffe4\016\uffe4\020\uffe4\022\035\023" +
    "\027\024\040\025\031\026\034\027\033\030\041\031\036" +
    "\032\037\033\032\034\uffe4\035\uffe4\041\uffe4\042\uffe4\045" +
    "\uffe4\046\uffe4\050\uffe4\051\uffe4\055\uffe4\056\uffe4\057\uffe4" +
    "\001\002\000\070\002\uffed\010\uffed\012\uffed\014\uffed\016" +
    "\uffed\020\uffed\022\uffed\023\uffed\024\040\025\031\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\041\uffed\042\uffed\045\uffed\046\uffed\050\uffed\051\uffed" +
    "\055\uffed\056\uffed\057\uffed\001\002\000\076\002\uffe0\010" +
    "\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\041\uffe0\042\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0\055" +
    "\uffe0\056\uffe0\057\uffe0\001\002\000\030\004\015\005\013" +
    "\006\006\013\017\023\004\040\014\043\005\044\007\047" +
    "\016\053\023\054\010\001\002\000\034\016\062\022\035" +
    "\023\027\024\040\025\031\026\034\027\033\030\041\031" +
    "\036\032\037\033\032\034\030\035\042\001\002\000\076" +
    "\002\uffde\010\uffde\012\uffde\014\uffde\015\uffde\016\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\041\uffde\042\uffde\045\uffde\046\uffde\050\uffde" +
    "\051\uffde\055\uffde\056\uffde\057\uffde\001\002\000\004\014" +
    "\070\001\002\000\010\012\066\014\uffd8\051\uffd8\001\002" +
    "\000\040\012\uffd7\014\uffd7\022\035\023\027\024\040\025" +
    "\031\026\034\027\033\030\041\031\036\032\037\033\032" +
    "\034\030\035\042\051\uffd7\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\040\012\uffd6\014" +
    "\uffd6\022\035\023\027\024\040\025\031\026\034\027\033" +
    "\030\041\031\036\032\037\033\032\034\030\035\042\051" +
    "\uffd6\001\002\000\070\002\ufff6\010\ufff6\012\ufff6\014\ufff6" +
    "\016\ufff6\020\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\041\ufff6\042\ufff6\045\ufff6\046\ufff6\050\ufff6\051" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\001\002\000\012\050\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\001\002\000\004\050\151\001" +
    "\002\000\012\050\uffc6\055\uffc6\056\uffc6\057\uffc6\001\002" +
    "\000\012\050\uffcb\055\uffcb\056\uffcb\057\077\001\002\000" +
    "\004\004\141\001\002\000\012\050\uffcf\055\102\056\075" +
    "\057\077\001\002\000\004\004\126\001\002\000\012\050" +
    "\uffce\055\uffce\056\uffce\057\uffce\001\002\000\012\050\uffbf" +
    "\055\uffbf\056\uffbf\057\uffbf\001\002\000\004\004\105\001" +
    "\002\000\012\050\uffca\055\102\056\uffca\057\uffca\001\002" +
    "\000\012\050\uffbe\055\uffbe\056\uffbe\057\uffbe\001\002\000" +
    "\004\013\106\001\002\000\006\004\107\014\uffbc\001\002" +
    "\000\004\011\124\001\002\000\010\010\uffba\014\uffba\020" +
    "\uffba\001\002\000\004\014\115\001\002\000\010\010\113" +
    "\014\uffbb\020\uffbb\001\002\000\004\004\107\001\002\000" +
    "\010\010\uffb9\014\uffb9\020\uffb9\001\002\000\006\011\117" +
    "\026\116\001\002\000\030\004\015\005\013\006\006\013" +
    "\017\023\004\040\014\043\005\044\007\047\016\053\023" +
    "\054\010\001\002\000\004\004\120\001\002\000\004\026" +
    "\121\001\002\000\030\004\015\005\013\006\006\013\017" +
    "\023\004\040\014\043\005\044\007\047\016\053\023\054" +
    "\010\001\002\000\042\022\035\023\027\024\040\025\031" +
    "\026\034\027\033\030\041\031\036\032\037\033\032\034" +
    "\030\035\042\050\uffc0\055\uffc0\056\uffc0\057\uffc0\001\002" +
    "\000\042\022\035\023\027\024\040\025\031\026\034\027" +
    "\033\030\041\031\036\032\037\033\032\034\030\035\042" +
    "\050\uffc1\055\uffc1\056\uffc1\057\uffc1\001\002\000\004\004" +
    "\125\001\002\000\010\010\uffbd\014\uffbd\020\uffbd\001\002" +
    "\000\004\026\127\001\002\000\010\004\130\017\131\037" +
    "\133\001\002\000\012\050\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\001\002\000\006\004\107\020\uffbc\001\002\000\012\050" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\001\002\000\004\052\134" +
    "\001\002\000\004\004\135\001\002\000\012\050\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\001\002\000\004\020\137\001\002" +
    "\000\012\050\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002\000" +
    "\012\050\uffcd\055\uffcd\056\uffcd\057\uffcd\001\002\000\006" +
    "\011\142\036\143\001\002\000\004\004\145\001\002\000" +
    "\030\004\015\005\013\006\006\013\017\023\004\040\014" +
    "\043\005\044\007\047\016\053\023\054\010\001\002\000" +
    "\042\022\035\023\027\024\040\025\031\026\034\027\033" +
    "\030\041\031\036\032\037\033\032\034\030\035\042\050" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\001\002\000\004\036\146" +
    "\001\002\000\030\004\015\005\013\006\006\013\017\023" +
    "\004\040\014\043\005\044\007\047\016\053\023\054\010" +
    "\001\002\000\042\022\035\023\027\024\040\025\031\026" +
    "\034\027\033\030\041\031\036\032\037\033\032\034\030" +
    "\035\042\050\uffc8\055\uffc8\056\uffc8\057\uffc8\001\002\000" +
    "\012\050\uffc5\055\uffc5\056\uffc5\057\uffc5\001\002\000\032" +
    "\004\015\005\013\006\006\013\017\023\004\040\014\043" +
    "\005\044\007\047\016\051\uffd9\053\023\054\010\001\002" +
    "\000\004\051\153\001\002\000\070\002\uffef\010\uffef\012" +
    "\uffef\014\uffef\016\uffef\020\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\041\uffef\042\uffef\045\uffef\046\uffef" +
    "\050\uffef\051\uffef\055\uffef\056\uffef\057\uffef\001\002\000" +
    "\006\004\171\020\uffd5\001\002\000\030\004\015\005\013" +
    "\006\006\013\017\023\004\040\014\043\005\044\007\047" +
    "\016\053\023\054\010\001\002\000\032\004\015\005\013" +
    "\006\006\013\017\014\uffdd\023\004\040\014\043\005\044" +
    "\007\047\016\053\023\054\010\001\002\000\006\010\163" +
    "\014\uffdc\001\002\000\036\010\uffdb\014\uffdb\022\035\023" +
    "\027\024\040\025\031\026\034\027\033\030\041\031\036" +
    "\032\037\033\032\034\030\035\042\001\002\000\004\014" +
    "\162\001\002\000\070\002\ufff7\010\ufff7\012\ufff7\014\ufff7" +
    "\016\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\041\ufff7\042\ufff7\045\ufff7\046\ufff7\050\ufff7\051" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000\030\004\015" +
    "\005\013\006\006\013\017\023\004\040\014\043\005\044" +
    "\007\047\016\053\023\054\010\001\002\000\036\010\uffda" +
    "\014\uffda\022\035\023\027\024\040\025\031\026\034\027" +
    "\033\030\041\031\036\032\037\033\032\034\030\035\042" +
    "\001\002\000\034\016\166\022\035\023\027\024\040\025" +
    "\031\026\034\027\033\030\041\031\036\032\037\033\032" +
    "\034\030\035\042\001\002\000\100\002\uffdf\010\uffdf\012" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\041\uffdf" +
    "\042\uffdf\045\uffdf\046\uffdf\050\uffdf\051\uffdf\052\167\055" +
    "\uffdf\056\uffdf\057\uffdf\001\002\000\030\004\015\005\013" +
    "\006\006\013\017\023\004\040\014\043\005\044\007\047" +
    "\016\053\023\054\010\001\002\000\070\002\ufff4\010\ufff4" +
    "\012\ufff4\014\ufff4\016\ufff4\020\ufff4\022\035\023\027\024" +
    "\040\025\031\026\034\027\033\030\041\031\036\032\037" +
    "\033\032\034\030\035\042\041\ufff4\042\ufff4\045\ufff4\046" +
    "\ufff4\050\ufff4\051\ufff4\055\ufff4\056\ufff4\057\ufff4\001\002" +
    "\000\004\026\200\001\002\000\006\010\176\020\uffd4\001" +
    "\002\000\004\020\175\001\002\000\006\010\uffd2\020\uffd2" +
    "\001\002\000\070\002\ufff5\010\ufff5\012\ufff5\014\ufff5\016" +
    "\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035" +
    "\ufff5\041\ufff5\042\ufff5\045\ufff5\046\ufff5\050\ufff5\051\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\001\002\000\004\004\171\001" +
    "\002\000\006\010\uffd1\020\uffd1\001\002\000\030\004\015" +
    "\005\013\006\006\013\017\023\004\040\014\043\005\044" +
    "\007\047\016\053\023\054\010\001\002\000\036\010\uffd3" +
    "\020\uffd3\022\035\023\027\024\040\025\031\026\034\027" +
    "\033\030\041\031\036\032\037\033\032\034\030\035\042" +
    "\001\002\000\034\022\035\023\027\024\040\025\031\026" +
    "\034\027\033\030\041\031\036\032\037\033\032\034\030" +
    "\035\042\041\203\001\002\000\030\004\015\005\013\006" +
    "\006\013\017\023\004\040\014\043\005\044\007\047\016" +
    "\053\023\054\010\001\002\000\070\002\ufff3\010\ufff3\012" +
    "\ufff3\014\ufff3\016\ufff3\020\ufff3\022\035\023\027\024\040" +
    "\025\031\026\034\027\033\030\041\031\036\032\037\033" +
    "\032\034\030\035\042\041\ufff3\042\205\045\ufff3\046\ufff3" +
    "\050\ufff3\051\ufff3\055\ufff3\056\ufff3\057\ufff3\001\002\000" +
    "\030\004\015\005\013\006\006\013\017\023\004\040\014" +
    "\043\005\044\007\047\016\053\023\054\010\001\002\000" +
    "\070\002\ufff2\010\ufff2\012\ufff2\014\ufff2\016\ufff2\020\ufff2" +
    "\022\035\023\027\024\040\025\031\026\034\027\033\030" +
    "\041\031\036\032\037\033\032\034\030\035\042\041\ufff2" +
    "\042\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\001\002\000\004\002\001\001\002\000\004" +
    "\036\211\001\002\000\030\004\015\005\013\006\006\013" +
    "\017\023\004\040\014\043\005\044\007\047\016\053\023" +
    "\054\010\001\002\000\034\022\035\023\027\024\040\025" +
    "\031\026\034\027\033\030\041\031\036\032\037\033\032" +
    "\034\030\035\042\045\213\001\002\000\030\004\015\005" +
    "\013\006\006\013\017\023\004\040\014\043\005\044\007" +
    "\047\016\053\023\054\010\001\002\000\034\022\035\023" +
    "\027\024\040\025\031\026\034\027\033\030\041\031\036" +
    "\032\037\033\032\034\030\035\042\046\215\001\002\000" +
    "\030\004\015\005\013\006\006\013\017\023\004\040\014" +
    "\043\005\044\007\047\016\053\023\054\010\001\002\000" +
    "\070\002\ufff0\010\ufff0\012\ufff0\014\ufff0\016\ufff0\020\ufff0" +
    "\022\035\023\027\024\040\025\031\026\034\027\033\030" +
    "\041\031\036\032\037\033\032\034\030\035\042\041\ufff0" +
    "\042\ufff0\045\ufff0\046\ufff0\050\ufff0\051\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\001\002\000\034\022\035\023\027\024\040" +
    "\025\031\026\034\027\033\030\041\031\036\032\037\033" +
    "\032\034\030\035\042\046\220\001\002\000\030\004\015" +
    "\005\013\006\006\013\017\023\004\040\014\043\005\044" +
    "\007\047\016\053\023\054\010\001\002\000\070\002\ufff1" +
    "\010\ufff1\012\ufff1\014\ufff1\016\ufff1\020\ufff1\022\035\023" +
    "\027\024\040\025\031\026\034\027\033\030\041\031\036" +
    "\032\037\033\032\034\030\035\042\041\ufff1\042\ufff1\045" +
    "\ufff1\046\ufff1\050\ufff1\051\ufff1\055\ufff1\056\ufff1\057\ufff1" +
    "\001\002\000\070\002\ufffc\010\ufffc\012\ufffc\014\ufffc\016" +
    "\ufffc\020\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\041\ufffc\042\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\014\002\011\003\010\004\020\005\021\006" +
    "\017\001\001\000\012\003\221\004\020\005\021\006\017" +
    "\001\001\000\012\003\216\004\020\005\021\006\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\201\004\020\005\021\006\017\001\001\000\002" +
    "\001\001\000\022\016\077\017\071\020\075\021\073\022" +
    "\102\023\070\024\072\025\100\001\001\000\016\003\064" +
    "\004\020\005\021\006\017\011\062\012\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\025\004\020\005" +
    "\021\006\017\001\001\000\002\001\001\000\012\003\055" +
    "\004\020\005\021\006\017\001\001\000\012\003\054\004" +
    "\020\005\021\006\017\001\001\000\012\003\053\004\020" +
    "\005\021\006\017\001\001\000\012\003\052\004\020\005" +
    "\021\006\017\001\001\000\012\003\051\004\020\005\021" +
    "\006\017\001\001\000\012\003\050\004\020\005\021\006" +
    "\017\001\001\000\012\003\047\004\020\005\021\006\017" +
    "\001\001\000\012\003\046\004\020\005\021\006\017\001" +
    "\001\000\012\003\045\004\020\005\021\006\017\001\001" +
    "\000\012\003\044\004\020\005\021\006\017\001\001\000" +
    "\012\003\043\004\020\005\021\006\017\001\001\000\012" +
    "\003\042\004\020\005\021\006\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\060\004\020\005\021\006\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\066\004\020\005\021\006\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\147" +
    "\001\001\000\002\001\001\000\016\016\137\021\073\022" +
    "\102\023\070\024\072\025\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\110\027\111\030\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\122\004\020\005\021\006\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\121\004" +
    "\020\005\021\006\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\131\001\001\000\002\001\001\000\010" +
    "\026\135\027\111\030\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\143\004\020\005\021" +
    "\006\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\146\004\020\005\021\006\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\064\004\020\005" +
    "\021\006\017\011\151\012\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\172\014\171\015\173\001" +
    "\001\000\012\003\164\004\020\005\021\006\017\001\001" +
    "\000\016\003\157\004\020\005\021\006\017\007\160\010" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\163\004\020\005" +
    "\021\006\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\167\004\020\005\021\006" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\176\001\001\000\002\001\001\000\012" +
    "\003\200\004\020\005\021\006\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\203\004\020\005\021" +
    "\006\017\001\001\000\002\001\001\000\012\003\205\004" +
    "\020\005\021\006\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\211\004\020\005" +
    "\021\006\017\001\001\000\002\001\001\000\012\003\213" +
    "\004\020\005\021\006\017\001\001\000\002\001\001\000" +
    "\012\003\215\004\020\005\021\006\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\220\004\020\005" +
    "\021\006\017\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TigerParse$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TigerParse$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TigerParse$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  // Methods and variables to be placed within the generated parser class

  private tigerc.util.ErrorMsg errorMsg;

  public void syntax_error (java_cup.runtime.Symbol current) {
    report_error("Syntax error (" + current.sym + ")", current);
  }

  public void report_error (String message, java_cup.runtime.Symbol info) {
    errorMsg.error(info.left, message);
  }

 
  public TigerParse (java_cup.runtime.Scanner lexer, 
                     tigerc.util.ErrorMsg errorMsg) {
    super(lexer);
    this.errorMsg = errorMsg;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TigerParse$actions {

 
  // Methods and variables to be placed in the "actions" class of the parser
  public tigerc.util.Symbol sym(String s) { 
    return tigerc.util.Symbol.sym(s); 
  }

  private final TigerParse parser;

  /** Constructor */
  CUP$TigerParse$actions(TigerParse parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TigerParse$do_action(
    int                        CUP$TigerParse$act_num,
    java_cup.runtime.lr_parser CUP$TigerParse$parser,
    java.util.Stack            CUP$TigerParse$stack,
    int                        CUP$TigerParse$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TigerParse$result;

      /* select the action based on the action number */
      switch (CUP$TigerParse$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tyfields_one_or_more ::= tyfields_one_or_more COMMA tyfield 
            {
              List<Pair<Symbol,Symbol>> RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		List<Pair<Symbol,Symbol>> ps = (List<Pair<Symbol,Symbol>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Pair<Symbol,Symbol> p = (Pair<Symbol,Symbol>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		  
    		  ps.add(p);
              RESULT = ps;  
      
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("tyfields_one_or_more",21, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tyfields_one_or_more ::= tyfield 
            {
              List<Pair<Symbol,Symbol>> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Pair<Symbol,Symbol> p = (Pair<Symbol,Symbol>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
               List<Pair<Symbol, Symbol>> ls = 
                    new java.util.ArrayList<Pair<Symbol, Symbol>>();
      		   ls.add(p);
               RESULT = ls; 
      
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("tyfields_one_or_more",21, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tyfield_list ::= tyfields_one_or_more 
            {
              List<Pair<Symbol,Symbol>> RESULT =null;
		int tfsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int tfsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Pair<Symbol,Symbol>> tfs = (List<Pair<Symbol,Symbol>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = tfs; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("tyfield_list",20, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tyfield_list ::= 
            {
              List<Pair<Symbol,Symbol>> RESULT =null;
		  
               RESULT = new java.util.ArrayList<Pair<Symbol, Symbol>>(); 
      
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("tyfield_list",20, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tyfield ::= ID COLON ID 
            {
              Pair<Symbol,Symbol> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
              RESULT = new Pair<Symbol,Symbol>(sym(i), sym(tid)); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("tyfield",22, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // one_or_more_fn_decls ::= one_or_more_fn_decls decl_fn 
            {
              List<DeclFn> RESULT =null;
		int dfsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int dfsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<DeclFn> dfs = (List<DeclFn>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		DeclFn df = (DeclFn)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		
    		  dfs.add(df);
              RESULT = dfs;  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("one_or_more_fn_decls",16, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // one_or_more_fn_decls ::= decl_fn 
            {
              List<DeclFn> RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		DeclFn df = (DeclFn)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
               List<DeclFn> ls = new java.util.ArrayList<DeclFn>();
      		   ls.add(df);
               RESULT = ls; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("one_or_more_fn_decls",16, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // decl_fn ::= FUNCTION ID LPAREN tyfield_list RPAREN COLON ID EQ exp 
            {
              DeclFn RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).right;
		List<Pair<Symbol,Symbol>> ps = (List<Pair<Symbol,Symbol>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).value;
		int rtyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int rtyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String rty = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
              RESULT = new DeclFn(fleft, sym(i), ps, 
                                  new TyName(rtyleft,sym(rty)), body); 
      
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_fn",19, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-8)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // decl_fn ::= FUNCTION ID LPAREN tyfield_list RPAREN EQ exp 
            {
              DeclFn RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		List<Pair<Symbol,Symbol>> ps = (List<Pair<Symbol,Symbol>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
              RESULT = new DeclFn(fleft, sym(i), ps, null, body); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_fn",19, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= ARRAY OF ID 
            {
              Ty RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int tidleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		  RESULT = new TyArray(aleft, sym(tid));  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= LBRACE tyfield_list RBRACE 
            {
              Ty RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int tysleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int tysright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<Pair<Symbol,Symbol>> tys = (List<Pair<Symbol,Symbol>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 RESULT = new TyRecord(lleft,tys); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= ID 
            {
              Ty RESULT =null;
		int tidleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int tidright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String tid = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		  RESULT = new TyName(tidleft,sym(tid)); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // one_or_more_ty_decls ::= one_or_more_ty_decls decl_ty 
            {
              List<DeclTy> RESULT =null;
		int dtsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int dtsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<DeclTy> dts = (List<DeclTy>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		DeclTy dt = (DeclTy)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
    		  dts.add(dt);
              RESULT = dts; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("one_or_more_ty_decls",15, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // one_or_more_ty_decls ::= decl_ty 
            {
              List<DeclTy> RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		DeclTy dt = (DeclTy)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
              List<DeclTy> ls = new java.util.ArrayList<DeclTy>();
      		  ls.add(dt);
              RESULT = ls; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("one_or_more_ty_decls",15, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // decl_ty ::= TYPE ID EQ type 
            {
              DeclTy RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new DeclTy(tpleft,sym(i),t); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_ty",18, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // decl_var ::= VAR ID COLON ID ASSIGN exp 
            {
              DeclVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
              RESULT = new DeclVar(vleft, sym(name), sym(t), init);  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_var",17, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // decl_var ::= VAR ID ASSIGN exp 
            {
              DeclVar RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
              RESULT = new DeclVar(vleft, sym(name), null, init);  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_var",17, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // decl ::= one_or_more_fn_decls 
            {
              Decl RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<DeclFn> df = (List<DeclFn>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new DeclGroupFunction(dfleft,df); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // decl ::= one_or_more_ty_decls 
            {
              Decl RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<DeclTy> dt = (List<DeclTy>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		  RESULT = new DeclGroupType(dtleft,dt);  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // decl ::= decl_var 
            {
              Decl RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		DeclVar dv = (DeclVar)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = dv; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl",12, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // decls_one_or_more ::= decls_one_or_more decl 
            {
              List<Decl> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<Decl> ds = (List<Decl>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
    		  ds.add(d);
              RESULT = ds; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decls_one_or_more",14, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // decls_one_or_more ::= decl 
            {
              List<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
               List<Decl> ls = new java.util.ArrayList<Decl>();
      		   ls.add(d);
               RESULT = ls;  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decls_one_or_more",14, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decl_list ::= decls_one_or_more 
            {
              List<Decl> RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Decl> ds = (List<Decl>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = ds; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_list",13, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decl_list ::= 
            {
              List<Decl> RESULT =null;
		  RESULT = new java.util.ArrayList<Decl>();  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("decl_list",13, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // fieldexps_one_or_more ::= fieldexps_one_or_more COMMA field_exp 
            {
              List<Pair<Symbol,Exp>> RESULT =null;
		int fesleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int fesright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		List<Pair<Symbol,Exp>> fes = (List<Pair<Symbol,Exp>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int feleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Pair<Symbol,Exp> fe = (Pair<Symbol,Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		
    		  fes.add(fe);
              RESULT = fes;  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("fieldexps_one_or_more",10, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // fieldexps_one_or_more ::= field_exp 
            {
              List<Pair<Symbol,Exp>> RESULT =null;
		int feleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int feright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Pair<Symbol,Exp> fe = (Pair<Symbol,Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
               List<Pair<Symbol,Exp>> ls = 
                                 new java.util.ArrayList<Pair<Symbol,Exp>>();
      		   ls.add(fe);
               RESULT = ls;  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("fieldexps_one_or_more",10, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // field_exp ::= ID EQ exp 
            {
              Pair<Symbol,Exp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
              RESULT = new Pair<Symbol,Exp>(sym(f),e); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("field_exp",11, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // field_exp_list ::= fieldexps_one_or_more 
            {
              List<Pair<Symbol,Exp>> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Pair<Symbol,Exp>> es = (List<Pair<Symbol,Exp>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = es; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("field_exp_list",9, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // field_exp_list ::= 
            {
              List<Pair<Symbol,Exp>> RESULT =null;
		  RESULT =  new java.util.ArrayList<>();  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("field_exp_list",9, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // seq_one_or_more ::= seq_one_or_more SEMICOLON exp 
            {
              List<Exp> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		
    		  es.add(e);
              RESULT = es; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("seq_one_or_more",8, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // seq_one_or_more ::= exp 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 List<Exp> ls = new java.util.ArrayList<Exp>();
      		   ls.add(e);
               RESULT = ls; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("seq_one_or_more",8, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_seq ::= seq_one_or_more 
            {
              List<Exp> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = es; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_seq",7, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_seq ::= 
            {
              List<Exp> RESULT =null;
		 RESULT = new java.util.ArrayList<>(); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_seq",7, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // args_one_or_more ::= args_one_or_more COMMA exp 
            {
              List<Exp> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
    		  es.add(e);
              RESULT = es; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("args_one_or_more",6, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // args_one_or_more ::= exp 
            {
              List<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 List<Exp> ls = new java.util.ArrayList<Exp>();
      		   ls.add(e);
               RESULT = ls; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("args_one_or_more",6, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arg_list ::= args_one_or_more 
            {
              List<Exp> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = es; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("arg_list",5, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arg_list ::= 
            {
              List<Exp> RESULT =null;
		  RESULT = new java.util.ArrayList<Exp>();  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("arg_list",5, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lval_not_id ::= lval_not_id LBRACK exp RBRACK 
            {
              Var RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int niright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Var ni = (Var)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 
              RESULT = new VarSubscript(nileft, ni, e); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("lval_not_id",4, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lval_not_id ::= ID LBRACK exp RBRACK 
            {
              Var RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 
              RESULT = new VarSubscript(aleft,new VarSimple(aleft,sym(a)),i); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("lval_not_id",4, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lval_not_id ::= lvalue DOT ID 
            {
              Var RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		  
              RESULT = new VarField(xleft, v, sym(x)); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("lval_not_id",4, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lvalue ::= lval_not_id 
            {
              Var RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Var ni = (Var)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = ni; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("lvalue",3, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lvalue ::= ID 
            {
              Var RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new VarSimple(xleft, sym(x)); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("lvalue",3, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_bop ::= exp OR exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.OR, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_bop ::= exp AND exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.AND, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_bop ::= exp GE exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.GE, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp_bop ::= exp GT exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.GT, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp_bop ::= exp LE exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.LE, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp_bop ::= exp LT exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.LT, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp_bop ::= exp NEQ exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.NE, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp_bop ::= exp EQ exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.EQ, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp_bop ::= exp DIVIDE exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.DIV, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp_bop ::= exp TIMES exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.MUL, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp_bop ::= exp MINUS exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.MIN, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp_bop ::= exp PLUS exp 
            {
              ExpOp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpOp(e1left, e1, ExpOp.Op.PLUS, e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp_bop",2, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= LET decl_list IN exp_seq END 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		List<Decl> ds = (List<Decl>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<Exp> body = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		
                  RESULT = new ExpLet(lleft, ds, new ExpSeq(bodyleft,body)); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= FOR ID ASSIGN exp TO exp DO exp 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-6)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).right;
		Exp lo = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp hi = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		
                  RESULT = new ExpFor(fleft,sym(i),lo,hi,body); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-7)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= WHILE exp DO exp 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpWhile(wleft, t, body); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpIfElse(ileft, t, e1,e2); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= IF exp THEN exp 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpIf(ileft, t, e); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= ID LBRACK exp RBRACK OF exp 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)).value;
		int szleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int szright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		Exp sz = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpArray(tleft, sym(t), sz, init); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-5)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= ID LBRACE field_exp_list RBRACE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<Pair<Symbol,Exp>> fs = (List<Pair<Symbol,Exp>>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 
                  RESULT = new ExpRecord(tleft, sym(t), fs);  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= LPAREN exp_seq RPAREN 
            {
              Exp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<Exp> es = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 
                  RESULT = new ExpSeq(esleft,es); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= ID LPAREN arg_list RPAREN 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		List<Exp> vs = (List<Exp>)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		 
                  RESULT = new ExpCall(fleft, sym(f), vs);  
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-3)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= lvalue ASSIGN exp 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT = new ExpAssign(vleft,v,e); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-2)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= BREAK 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new ExpBreak(bleft); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= NIL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT= new ExpNil(nleft); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= lvalue 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = new ExpVar(vleft,v); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= MINUS exp 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 
                  RESULT= new ExpOp(mleft, new ExpInt(eleft, 0), 
                                    ExpOp.Op.MIN, e); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= exp_bop 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		ExpOp e = (ExpOp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = e; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT= new ExpString(sleft, s); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= INT 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT= new ExpInt(ileft, i.intValue()); 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.peek()).value;
		 RESULT = e; 
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          return CUP$TigerParse$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)).value;
		RESULT = start_val;
              CUP$TigerParse$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TigerParse$stack.elementAt(CUP$TigerParse$top-1)), ((java_cup.runtime.Symbol)CUP$TigerParse$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TigerParse$parser.done_parsing();
          return CUP$TigerParse$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

