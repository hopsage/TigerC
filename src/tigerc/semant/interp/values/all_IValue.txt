package tigerc.semant.interp.values;


public interface IValue {

}


//////////////////////////////////////////////////////////////////////////////

package tigerc.semant.interp.values;


public class ValInt implements IValue {
    public final int val;

    public ValInt(int v) {
        val = v;
    }

    public String toString() {
        return "" + val;
    }
}

//////////////////////////////////////////////////////////////////////////////

package tigerc.semant.interp.values;


public class ValStr implements IValue {
    public final String val;

    public ValStr(String s) {
        val = s;
    }

    public String toString() {
        return val;
    }
}

//////////////////////////////////////////////////////////////////////////////

/**
 * ValArray.java
 * 
 * Author:  jhelasseter
 * 
 * NOTE:  This representation of arrays is really that of a heterogeneously-
 * typed list, which is to say that there is no requirement that every element 
 * be of the same type.  A type error will occur dynamically, at the point 
 * where some element is used in a manner inconsistent with its type.
 * 
 */

package tigerc.semant.interp.values;

import tigerc.semant.types.ARRAY;

public class ValArray implements IValue {
    private final IValue[] elts;

    public ValArray(int sz, IValue init) {
        elts = new IValue[sz];
        for (int i = 0; i < sz; i++) {
            elts[i] = init; // Is this right? Should there be a deep copy of
                            // init?
        }
    }

    public IValue get(int i) {
        return elts[i];
    }

    public void set(int i, IValue v) {
        elts[i] = v;
    }

    public int size() {
        return elts.length;
    }
}

//////////////////////////////////////////////////////////////////////////////

/**
 * ValRecord.java
 * 
 * Author:  jhelasseter
 * 
 * NOTE:  As ValArray does with arrays, this representation of records 
 * implements duck typing.  The only way to generate a type error is to access
 * a field symbol not defined for this ValRecord object.  As long as the symbol
 * is there and the associated value is of the correct type, the access won't 
 * fail.
 * 
 */

package tigerc.semant.interp.values;

import java.util.HashMap;
import java.util.List;

import tigerc.util.Pair;
import tigerc.util.Symbol;

public class ValRecord implements IValue {
    private HashMap<Symbol, IValue> fields;

    public ValRecord(List<Pair<Symbol, IValue>> init) {
        fields = new HashMap<>();
        for (Pair<Symbol, IValue> p : init) {
            Symbol s = p.fst;
            IValue v = p.snd;
            if (!fields.containsKey(s))
                fields.put(s, v);
            else
                throw new java.lang.IllegalArgumentException(
                        "Duplicate field initialization for field " + s);
        }
    }

    public IValue get(Symbol s) {
        IValue v = fields.get(s);
        if (v == null)
            throw new java.lang.IllegalArgumentException(
                    "Record has no field named " + s);
        else
            return v;
    }

    public void set(Symbol s, IValue v) {
        if (!fields.containsKey(s))
            throw new java.lang.IllegalArgumentException(
                    "Record has no field named " + s);
        else
            fields.put(s, v);
    }
}

